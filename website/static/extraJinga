{{ question['questionText'] }}

#entryInput {
  font-size: 20px;
}



MENTION WHY IMPLICATED FUNCTION FOR CREATING ELEMENTS:

    const answerEntry = document.createElement("input")
    answerEntry.setAttribute("placeholder", "Enter the number of people...")
    const element = document.getElementById("answer-container")
    answerEntry.setAttribute("id", "entryInput")
    answerEntry.setAttribute("type", "text")
    answerEntry.setAttribute("size", "30")
    element.appendChild(answerEntry)
    const submitButton = document.createElement("button")
    submitButton.setAttribute("class", "bte btn-primary")
    submitButton.setAttribute()




    WAS IN TEST PAGE
    {% for country in countries %}
    {% for countryCode, countryName in country.items() %}
        <div class="option">
              <input type="radio" class="radio" id="{{ countryCode }}" name="countries"/>
              <label for="{{ countryCode }}">{{ countryName }}</label>
        </div>
    {% endfor %}
    {% endfor %}







    # questionsStream = CollectionStream(questions).stream()\
    #     .filter(lambda x:not(isQuestionAnswered(1, x.get("questionID"))))\
    #     .filter(lambda x:x.get("mandatory") == True)\
    #     .sort(lambda x:x.get("questionID")).first()


    # if questionsStream == None:
    #     # This will only run when their are no questions left or test2.json is empty/no questions to begin with
    #     # filter and get the non mandatory questions
    #     # also filtering questions they have answered as they may answer a question and this will loop
    #     # questionsStream = CollectionStream(questions).stream()\
    #     #     .filter(lambda x:x.get("mandatory") == False) \
    #     #     .filter(lambda x: not(isQuestionAnswered(1, x.get("questionID"))))\
    #     #     .filter(lambda x:haveRequirementsBeenMet(travelID, x.get("questionID"))) \
    #     #     .sort(lambda x:x.get("questionID"))\
    #     #     .first()
    #
    #     print(questionsStream)
    #
    #     if questionsStream == None:
    #         return 1
    #     else:
    #         return questionsStream.get("questionID")
    #
    # else:
    #     return questionsStream.get("questionID")








    Old setting attributes before enum
    # setattr(current_country, "water_sports_score", userCountryWaterScore)
    # setattr(current_country, "winter_sports_score", userCountryWinterScore)
    # setattr(current_country, "culture_score", userCountryCultureScore)
    # setattr(current_country, "safety_score", userCountrySafetyScore)
    # setattr(current_country, "budget_score", userCountryBudgetScore)

    Old appending
    # update the user's scores to the relative score compared to largest value
    # water_sports_user_score = water_sports_user_score / most_important_user_score
    # winter_sports_user_score = winter_sports_user_score / most_important_user_score
    # culture_user_score = culture_user_score / most_important_user_score
    # safety_user_score = safety_user_score / most_important_user_score
    # budget_user_score = budget_user_score / most_important_user_score
    # user_relative_scores = []
    # user_relative_scores.append(water_sports_user_score)
    # user_relative_scores.append(winter_sports_user_score)
    # user_relative_scores.append(culture_user_score)
    # user_relative_scores.append(safety_user_score)
    # user_relative_scores.append(budget_user_score)
    # print(user_relative_scores)


    Old usercountry score
    # userCountryWaterScore = water_sports_user_score * country_water_sports_score
    # userCountryWinterScore = water_sports_user_score * country_winter_sports_score
    # userCountryCultureScore = culture_user_score * country_culture_score
    # userCountrySafetyScore = safety_user_score * country_safety_score
    # userCountryBudgetScore = budget_user_score * country_budget_score
    # userCountryScores.append(userCountryWaterScore)
    # userCountryScores.append(userCountryWinterScore)
    # userCountryScores.append(userCountryCultureScore)
    # userCountryScores.append(userCountrySafetyScore)
    # userCountryScores.append(userCountryBudgetScore)



    Attempt at setting table score for country to 0
    # for countryScoreX in country_scores:
    #     if country_scores[countryScoreX] == None:
    #         print("NONE HERE")
    #         print(countryScoreX, country_scores[countryScoreX])
    #         print(countryScoreX)
    #         print("3rd print")
    #         print(CountryScoreEnum)
    #         print(CountryScoreEnum[countryScoreX].value)
    #         setattr(current_country, CountryScoreEnum[countryScoreX].value, 0)
    #         countryScore = Sport.query.get((countryCode))
    #         # Adds a dictionary key of the Water Sports to the attribute of enum value for water sports
    #         country_scores[CountryScoreEnum.WATER_SPORTS.name] = getattr(countryScore,
    #                                                                      CountryScoreEnum.WATER_SPORTS.value)
    #         country_scores[CountryScoreEnum.WINTER_SPORTS.name] = getattr(countryScore,
    #                                                                       CountryScoreEnum.WINTER_SPORTS.value)
    #         # country_water_sports_score = getattr(countryScore, CountryScoreEnum.WATER_SPORTS.value)
    #         # country_winter_sports_score = getattr(countryScore, CountryScoreEnum.WINTER_SPORTS.value)
    #
    #         countryScore = CulturalValue.query.get((countryCode))
    #         country_scores[CountryScoreEnum.CULTURE_SCORE.name] = getattr(countryScore,
    #                                                                       CountryScoreEnum.CULTURE_SCORE.value)
    #         # country_culture_score = getattr(countryScore, CountryScoreEnum.CULTURE_SPORTS.value)
    #
    #         countryScore = Safety.query.get((countryCode))
    #         country_scores[CountryScoreEnum.SAFETY_SCORE.name] = getattr(countryScore,
    #                                                                      CountryScoreEnum.SAFETY_SCORE.value)
    #         # country_safety_score = getattr(countryScore, CountryScoreEnum.SAFETY_SCORE.value)
    #
    #         countryScore = Cost.query.get((countryCode))
    #         country_scores[CountryScoreEnum.BUDGET_SCORE.name] = getattr(countryScore,
    #                                                                      CountryScoreEnum.BUDGET_SCORE.value)

        #print(countryScoreX,country_scores[countryScoreX])

        {{ best_countries }}

            Was in question Handler - bad to use
            # if questionID == 1:
            #     # Hard coded as the first question will ALWAYS be num travellers
            #     # Avoid this if in the next questions?
            #     print("This is the first question")
            #     print(int(answerValue))
            #
            #     x = getattr(current_travel, "num_travellers")
            #     print(x)
            #     setattr(current_travel, "num_travellers", x + answerIntegerValue)


    <tbody>
        {% for country in best_countries %}
        <!-- sets the country name to the first part of the tuple-->
        {% set countryName = country[0] %}
        <!-- sets the country dictionary Which has the rough cost and value for travelling to that country  -->
        {% set countryDict = country[2] %}
        {% for roughCostText, roughCost in countryDict.items() %}
            <tr>
                <th scope="row">{{ hello }}</th>
                <td>{{ countryName }}</td>
                <td>{{ roughCostText }}: <span class="cost-number">Â£{{ roughCost}}</span></td>
            </tr>
        {% endfor %}
        {% endfor %}
    </tbody>
